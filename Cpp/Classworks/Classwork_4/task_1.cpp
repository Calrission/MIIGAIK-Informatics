#include <algorithm>
#include <vector>
#include <iostream>
using namespace std;

// Что выведено на экран? (прокомментируйте код)

int main() {
    vector<int> arr(20, 0);    // Иницализация список (вектор) arr с 20-ю 0-ми
    int i = 23;                         // Иницализация i равного 23
    for (auto &x : arr) {         // Проходимся циклом по списку arr, не копируя элементы arr
        x = i++;                        // Т.к. мы не копировали, а ссылаемся на элемент списка и изменеяем его на новое значение равное i + 1, то и элемент списка тоже изменится
        i *= 33;                        // Новое значение i равно старое значение i умноженное на 33
    }

    auto isEven = [](int i) {
        // Объявление lambda функции isEven,
        // которая из внешней среды ничего не берёт
        // при вызове принимает целочисленный i
        return (i % 2 == 0); // Возвращаем логическое занчение, является ли число четным, т.е. делится ли оно на 2 без остатка
    };

    auto any = [isEven](vector<int> &a) {
        // Объявление lambda функции any,
        // которая из внешней среды берёт объявление lambda функции isEven
        // при вызове принимает ссылку на список (вектор) "a" с целыми числами
        // Возвращаем логическое занчение, используя функцию "any_of" из библиотеки algorithm, которая принимает итератор начала, конца вектора и функцию, которая возвращает bool и
        // принимает элемент вектора, т.е. isEven.
        // Смысл: есть ли хотя бы одно четное число в векторе
        return any_of(a.begin(), a.end(), isEven);
    };

    auto all = [isEven](vector<int> &a) {
        // Объявление lambda функции all,
        // которая из внешней среды берёт объявление lambda функции isEven
        // при вызове принимает ссылку на список (вектор) "a" с целыми числами
        // Возвращаем логическое занчение, используя функцию "all_of" из библиотеки algorithm, которая принимает итератор начала, конца вектора и функцию, которая возвращает bool и
        // принимает элемент вектора, т.е. isEven.
        // Смысл: все ли числа в векторе a ялвяются четными
        return all_of(a.begin(), a.end(), isEven);
    };

    // Показываем результат вызова lambda функций any и all
    cout << any(arr) << " " << all(arr);

    return 0;
}